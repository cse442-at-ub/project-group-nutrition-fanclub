Index: nutrients-fanclub/src/components/Signup.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import axios from \"axios\";\r\nimport React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Bigbutton from './Bigbutton';\r\nimport Content_signup from \"./Content_signup\";\r\nimport Input_login from './Input_login';\r\n\r\nfunction Signup() {\r\n    const [username, setUsername] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [favoriteRestaurant, setFavoriteRestaurant] = useState(\"\");\r\n    const [errors, setErrors] = useState({\r\n        username: '',\r\n        email: '',\r\n        password: '',\r\n        favoriteRestaurant: '',\r\n        submit: ''\r\n    });\r\n\r\n    const signUpUser = () => {\r\n        const userData = {\r\n            username: username,\r\n            password: password,\r\n            email: email,\r\n            favoriteRestaurant: favoriteRestaurant\r\n        };\r\n\r\n        axios.post('https://www-student.cse.buffalo.edu/CSE442-542/2023-Fall/cse-442ae/backend_updadated_new/signup.php', userData)\r\n            .then(response => {\r\n                const response_json = JSON.parse(response.data.substring(1));\r\n                if (response_json.status === 0) {\r\n                    const error = response_json.errors;\r\n                    let allErrors = {};\r\n                    for (const field in error) {\r\n                        allErrors[field] = error[field];\r\n                    }\r\n                    setErrors({ ...allErrors, submit: 'Unable to create account, please check all fields' });\r\n                    console.log(\"Unable to create account, please check all fields\");\r\n                } else {\r\n                    setErrors({\r\n                        username: '',\r\n                        email: '',\r\n                        password: '',\r\n                        favoriteRestaurant: '',\r\n                        submit: ''\r\n                    });\r\n                    console.log(\"User registration successful!\");\r\n                    // Uncomment the next line if you want to navigate after successful registration\r\n                    // navigate('/CSE442-542/2023-Fall/cse-442ae/build/login');\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                setErrors({ ...errors, submit: 'An error occurred. Please try again later.' });\r\n                console.log(\"An error occurred. Please try again later.\");\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className='app-container' style={{ paddingTop: 150 }}>\r\n                <span>\r\n                    <Input_login placeholder=\"Username\" value={username} onChange={(e) => setUsername(e.target.value)} />\r\n                    <Input_login placeholder=\"Email address\" value={email} onChange={(e) => setEmail(e.target.value)} />\r\n                    <Input_login placeholder=\"Password\" type=\"password\" value={password} onChange={(e) => setPassword(e.target.value)} />\r\n                    <Input_login placeholder=\"Favorite Restaurant\" value={favoriteRestaurant} onChange={(e) => setFavoriteRestaurant(e.target.value)} />\r\n                </span>\r\n                <Link to='/CSE442-542/2023-Fall/cse-442ae/build/login'><Bigbutton text=\"CREATE\" onClick={signUpUser} /></Link>\r\n                <Content_signup />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Signup;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/nutrients-fanclub/src/components/Signup.js b/nutrients-fanclub/src/components/Signup.js
--- a/nutrients-fanclub/src/components/Signup.js	
+++ b/nutrients-fanclub/src/components/Signup.js	
@@ -25,9 +25,11 @@
             email: email,
             favoriteRestaurant: favoriteRestaurant
         };
+        console.log("Sending user data: ", userData);
 
         axios.post('https://www-student.cse.buffalo.edu/CSE442-542/2023-Fall/cse-442ae/backend_updadated_new/signup.php', userData)
             .then(response => {
+                console.log("Server Response Raw: ", response.data);  // <-- Add this line
                 const response_json = JSON.parse(response.data.substring(1));
                 if (response_json.status === 0) {
                     const error = response_json.errors;
Index: nutrients-fanclub/backend_updated/signup.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\ninclude 'config.php';\r\nmysqli_report(MYSQLI_REPORT_ERROR | MYSQLI_REPORT_STRICT);\r\n//this script stores new user info (username,password,email,fav restaurant) into usersinfo table\r\nfunction isPasswordValidLength($password) {\r\n    // 8 - 20 length\r\n    return strlen($password) >= 8 && strlen($password) <= 20;\r\n}\r\n\r\nfunction isValidInput($input) {\r\n    // \r\n    $invalidCharacters = [' ', '!', '@', '#', '$', '%', '^', '&', '*'];\r\n    foreach ($invalidCharacters as $char) {\r\n        if (strpos($input, $char) !== false) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction containsNumberAndLetter($input) {\r\n    //is number and letter?\r\n    return preg_match('/[A-Za-z]/', $input) && preg_match('/[0-9]/', $input);\r\n}\r\n\r\nfunction checkPasswordValidity($input) {\r\n    // only number and letter\r\n    return preg_match('/^[A-Za-z0-9]+$/', $input) ? \"Valid\" : \"Password invalid\";\r\n}\r\n\r\n\r\n// create the 'users' table\r\n    $db = new DbConn;\r\n    $conn = $db->connect();\r\n// SQL statement to create the 'users' table\r\n    $sql = \"CREATE TABLE IF NOT EXISTS usersinfo (\r\n        id INT AUTO_INCREMENT PRIMARY KEY,\r\n        username VARCHAR(255) NOT NULL,\r\n        password VARCHAR(255) NOT NULL,\r\n        email VARCHAR(255) NOT NULL,\r\n        favorite_restaurant VARCHAR(255) NOT NULL\r\n    )\";\r\n\r\n    if ($conn->query($sql) === TRUE) {\r\n        echo \"Table 'users' created successfully!\";\r\n    } else {\r\n        echo \"Error creating table: \" . $mysqli->error;\r\n\r\n}\r\n\r\nheader(\"Access-Control-Allow-Origin: *\");\r\nheader(\"Access-Control-Allow-Headers: *\");\r\n\r\n$method = $_SERVER['REQUEST_METHOD'];\r\nswitch ($method) {\r\n    case \"POST\":\r\n        $user = json_decode(file_get_contents('php://input'));\r\n        $sql = \"SELECT COUNT(*) FROM usersinfo WHERE email = :email\";\r\n        $stmt = $conn->prepare($sql);\r\n        $stmt->bindParam(':email', $user->email);\r\n        $stmt->execute();\r\n        $count = $stmt->fetchColumn();\r\n        // Validate input fields\r\n        $errors = [];\r\n\r\n        if ($count > 0) {\r\n            $errors['email'] = 'Email address already exists';\r\n        }\r\n        if (!preg_match('/^[a-zA-Z ]+$/', $user->username)) {\r\n            $errors['username'] = 'Username should only contain letters and spaces';\r\n        }\r\n        if (!filter_var($user->email, FILTER_VALIDATE_EMAIL)) {\r\n            $errors['email'] = 'Invalid email address';\r\n        }\r\n        if (strlen($user->password) < 8) {\r\n            $errors['password'][] = 'Password should be at least 8 characters long';\r\n        }\r\n        if (count($errors) > 0) {\r\n            $response = ['status' => 0, 'message' => 'Input validation failed', 'errors' => $errors];\r\n            echo json_encode($response);\r\n            exit();\r\n        } else {\r\n            $sql = \"INSERT INTO usersinfo (username, password, email, favorite_restaurant) VALUES (:username, :password, :email, :favoriteRestaurant)\";\r\n            $param = $conn->prepare($sql);\r\n            $param->bindParam(':username', $user->username);\r\n            $hashed_password = password_hash($user->password, PASSWORD_DEFAULT);\r\n            $param->bindParam(':password', $hashed_password);\r\n            $param->bindParam(':email', $user->email);\r\n            $param->bindParam(':favoriteRestaurant', $user->favorite_restaurant);\r\n            if ($param->execute()) {\r\n                $response = ['status' => 1, 'message' => 'Record Created'];\r\n            } else {\r\n                $response = ['status' => 0, 'message' => 'Record Failed to Create'];\r\n            }\r\n            echo json_encode($response);\r\n            break;\r\n        }\r\n}\r\n?>\r\n\r\n\r\n\r\n\r\n\r\n\r\n
===================================================================
diff --git a/nutrients-fanclub/backend_updated/signup.php b/nutrients-fanclub/backend_updated/signup.php
--- a/nutrients-fanclub/backend_updated/signup.php	
+++ b/nutrients-fanclub/backend_updated/signup.php	
@@ -84,7 +84,7 @@
             $param = $conn->prepare($sql);
             $param->bindParam(':username', $user->username);
             $hashed_password = password_hash($user->password, PASSWORD_DEFAULT);
-            $param->bindParam(':password', $hashed_password);
+            $param->bindParam(':password', $hashed_password);qres
             $param->bindParam(':email', $user->email);
             $param->bindParam(':favoriteRestaurant', $user->favorite_restaurant);
             if ($param->execute()) {
